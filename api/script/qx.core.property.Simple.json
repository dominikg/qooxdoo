{"attributes": {"fullName": "qx.core.property.Simple", "packageName": "qx.core.property", "isStatic": true, "type": "bootstrap", "name": "Simple"}, "type": "class", "children": [{"attributes": {"text": "<p>Property handling for simple key/value like properties which might have an optional init value.</p>\n\n<p>Supports the following configuration keys:</p>\n\n<ul>\n<li><strong>check</strong>: Check the incoming value for the given type or function.</li>\n<li><strong>apply</strong>: Method to call after a new value has been stored. The signature of the method is \n  <code>function(newValue, oldValue, propertyName)</code>.</li>\n<li><strong>event</strong>: Event to fire after a new value has been stored (and apply has been called). The event\n  type is a {@link qx.event.type.Data} which contains both, the old and new value (using getData/getOldData).</li>\n<li><strong>init</strong>: Init value for the property. If no value is set or the property gets reset, the getter\n  will return the <code>init</code> value.</li>\n<li><strong>nullable</strong>: Whether the property is able to store null values. This also allows the system to\n  return <code>null</code> when no other value is available. Otherwise an error is thrown whenever no value is \n  available.</li>\n<li><strong>refine</strong>: Refinements are used to alter the init value of a property. No other changes are\n  allowed/supported as the generated member methods are shared between classes/objects.</li>\n</ul>"}, "type": "desc"}, {"type": "methods-static", "children": [{"attributes": {"isStatic": true, "name": "add"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The class to modify</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the property. Camel-case. No special characters.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>Configuration for the property to being created</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds a new property to the given class.</p>\n\n<p>Please note that you need to define one of &#8220;init&#8221; or &#8220;nullable&#8221;. Otherwise you\nmight get errors during runtime function calls.</p>"}, "type": "desc"}]}]}]}