{"attributes": {"fullName": "qx.core.Type", "packageName": "qx.core", "isStatic": true, "type": "class", "name": "Type"}, "type": "class", "children": [{"attributes": {"text": "<p>Convenient type check <span class=\"caps\">API</span> with focus on a small base set features, mainly as\nused by the property system, and an additional possibility to register\nnew types dynamically.</p>\n\n<p>Built-in support:</p>\n\n<ul>\n<li>All native types e.g. String, Number, Boolean, Function, ...</li>\n<li>Node types. Currently: Node, Element and Document</li>\n<li>Special numeric values: Integer, PositiveNumber and PositiveInteger</li>\n<li>Check whether the value matches the given regular expression</li>\n<li>qooxdoo-specific types Class, Interface, Mixin and Theme</li>\n<li>Instanceof checks based on class name</li>\n<li>Implementation checks based on interface</li>\n<li>Whether a mixin is included into the value</li>\n</ul>\n\n<p>Plus:</p>\n\n<ul>\n<li>Lists of possible values e.g. [&#8220;top&#8221;,&#8220;bottom&#8221;]</li>\n<li>Custom check functions e.g. function(value) { return xxx } (should return boolean)</li>\n</ul>"}, "type": "desc"}, {"type": "methods-static", "children": [{"attributes": {"isStatic": true, "name": "add"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Identifier of the type. Should be camel-case (with first character being uppercase)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "method"}, "type": "param", "children": [{"attributes": {"text": "<p>Pointer to function to call</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "context"}, "type": "param", "children": [{"attributes": {"text": "<p>Context to call the function in</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Registers new types to the class.</p>\n\n<p>The function should return <code>false</code> whenever the value is invalid.</p>"}, "type": "desc"}]}, {"attributes": {"isStatic": true, "name": "check"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Any value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "check"}, "type": "param", "children": [{"attributes": {"text": "<p>Any supported check e.g. native type, class name, ...</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "window", "name": "context"}, "type": "param", "children": [{"attributes": {"text": "<p>Only useful when function-checks are used. Defines the context\n   in this the function is being called.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "Error", "name": "errorClass"}, "type": "param", "children": [{"attributes": {"text": "<p>The error class</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Error"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Advanced type checks offered by the property system, made available\nwidely for usage in other scenarios as well.</p>\n\n<p>Just call the method with the value and any of the property \nsystem supported checks and the method throws an error whenever\nthe incoming value does not conform.</p>"}, "type": "desc"}]}]}]}