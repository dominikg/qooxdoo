{"attributes": {"isStatic": true, "name": "Multi", "hasWarning": true, "packageName": "qx.core.property", "hasError": true, "fullName": "qx.core.property.Multi", "type": "bootstrap"}, "type": "class", "children": [{"type": "methods-static", "children": [{"attributes": {"isStatic": true, "name": "add"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The class to modify</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the property. Camel-case. No special characters.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "config"}, "type": "param", "children": [{"attributes": {"text": "<p>Configuration for the property to being created</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds a new multi-field property to the given class.</p>\n\n<p>Please note that you need to define one of &#8220;init&#8221; or &#8220;nullable&#8221;. Otherwise you might get errors during runtime\nfunction calls.</p>"}, "type": "desc"}]}, {"attributes": {"isStatic": true, "name": "getInheritableProperties"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>Class to query</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a list of all inheritable properties supported by the given class</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>All inheritable property names and a dictionary for faster lookup</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"isStatic": true, "name": "getSingleValue"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "obj"}, "type": "param", "children": [{"attributes": {"text": "<p>Any object with the given property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}]}]}, {"attributes": {"name": "propertyName"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the property to query</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "field"}, "type": "param", "children": [{"attributes": {"text": "<p>One of &#8220;init&#8221;, &#8220;inheritance&#8221;, &#8220;theme&#8221;, &#8220;user&#8221; or &#8220;override&#8221;</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a value from a specific field for the given property &#8211; ignoring the priorities.</p>"}, "type": "desc"}]}, {"attributes": {"isStatic": true, "name": "importData"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "obj"}, "type": "param", "children": [{"attributes": {"text": "<p>Any widget</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}, {"attributes": {"name": "values"}, "type": "param", "children": [{"attributes": {"text": "<p>Map of properties to apply</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "oldValues"}, "type": "param", "children": [{"attributes": {"text": "<p>Map of old property values. Just used for comparision. \n   Required for theme changes. In case of a state change the old value is not available otherwise.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "field"}, "type": "param", "children": [{"attributes": {"text": "<p>Storage field to modify</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Imports a list of values. Useful for batch-applying a whole set of properties. Supports\n<code>undefined</code> values to reset properties.</p>"}, "type": "desc"}]}, {"attributes": {"isStatic": true, "name": "moveObject"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "obj"}, "type": "param", "children": [{"attributes": {"text": "<p>The modified object</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}]}]}, {"attributes": {"name": "newParent"}, "type": "param", "children": [{"attributes": {"text": "<p>The current parent</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}]}]}, {"attributes": {"name": "oldParent"}, "type": "param", "children": [{"attributes": {"text": "<p>The new parent</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Process an object whenever the parent has changed.</p>\n\n<p>Should be called by the object itself which was modified. Required are both parents, the old and the new one \nto make this work correctly. All given objects need to support the &#8221;$$parent&#8221; and &#8221;$$data&#8221; object fields.</p>\n\n<p>This function is quite optimized for reduced additional function calls. The only expensive scenarios are when \na property is currently inherited or the new parent offers a value which needs to aquired using a get() \ncall (e.g. themed or itself inherited). This means it is basically cheap for initial application creation, \nbut is more expensive as soon as the application is running and objects are moved around dynamically.</p>"}, "type": "desc"}]}]}, {"type": "errors", "children": [{"attributes": {"msg": "Class documentation is missing.", "column": 22, "line": 236}, "type": "error"}]}]}