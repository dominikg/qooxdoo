====== Generator Configuration File ======


===== Overview =====

The configuration file that drives the generator adheres to the [[http://json.org/|JSON specification]]. It has the following general structure:

<code javascript>
{
  "jobs" :
  {
    "job1" : { ... },
    "job2" : { ... },
    ...
    "jobN" : { ... }
  }
}
</code>

The job names ''job1'', ..., ''jobN'' are freely chooseable but must form a valid key. JavaScript-style comments (/*...*/ and %%//%%...) are permissible but only in rather robust places, like after a comma or directly after opening or before closing parentheses, but e.g. not between a key and its value.

Quick links:
  * [[generator_config_ref]]
  * [[generator_config_macros]]
  * [[generator_config_articles|Configuration Detail Articles]]
  * [[documentation:1.2:generator_config_background|Implementation Background Information]]


===== Example =====

Here is an example of a minimal config file that defines a single job to create the source version of an application:

<code javascript>
{
  "jobs" :
  {
    "source" : 
    {
      "let" :
      {
        "QOOXDOO_PATH" : "../..",
        "APPLICATION" : "custom"
      ],

      "library" :
      [
        {
          "manifest"     : "${QOOXDOO_PATH}/framework/Manifest.json"
        },
        {
          "manifest"     : "./Manifest.json"
        }
      ],

      "compile-source" :
      {
        "paths" :  
          {
            "file" : "./source/script/${APPLICATION}.js"
          }
      },

      "require" :
      {
        "qx.log.Logger" : ["qx.log.appender.Native"]
      },

      "settings" : 
      {
        "qx.application" : "${APPLICATION}.Application"
      },

      "cache" :
      {
        "compile" : { "path" : "../../cache2" }
      }
    }
  }
}

</code>



===== Syntax =====

Apart from the general Json rules, you can place '=' in front of job and key names, to indicate that this feature should prevail as specified when configs get merged. See [[generator_config_articles#job_shadowing_and_partial_overriding|here]] for more details on that. The config system also allows the use of //macros//, details of which can be found [[generator_config_articles#let_key|here]].




===== Valid Job Keys =====

The value of each job is a map where the keys are **not** freely chooseable, but are predefined. 

Keys can be grouped into several categories:
  * ''structure-changing'' - Keys that influence the configuration itself, e.g. the contents or structure of jobs, the job queue, or the config file as a whole (e.g. //extend, include (top-level), run//).
  * ''actions'' - Keys that if present trigger a certain action in the generator, which usually results in some output (e.g. //compile-source, api, localize//).
  * ''input/output-setting'' - Keys that specify input (e.g. classes or ranges of classes to deal with) and output (e.g. packaging, variants) options (e.g. //library, require, include//).
  * ''runtime-settings'' - Keys pertaining to the working needs of the generator (e.g. //cache//).
  * ''miscellaneous'' - Keys that don't fall in any of the other categories (e.g. //desc//).


First, here is an overview table, to list all possible keys in a job (unless otherwise noted). Below that you'll find a structured listing of all possible configuration keys in their respective context, with links to further information for each key.

^  Action Keys               ^         Description ^
|api  | Triggers the generation of a custom Apiviewer application.|
|clean-files  | Delete files and directories from the file system. |
|combine-images |Triggers creation of a combined image file that contains various images.|
|compile-dist  | Triggers the generation of the build version of the app.|
|compile-source  |Triggers generation of the source version of the app.|
|copy-files  | Triggers files/directories to be copied. |
|copy-resources  | Triggers the copying of resources. |
|fix-files  | Fix white space in source files. |
|lint-check  | Check source code with a lint-like utility.  |
|migrate-files  | Migrate source code to the current qooxdoo version. |
|pretty-print | Format source files. |
|shell  | Triggers the execution of an  external command.|
|slice-images | Triggers cutting images into regions.|
|translate | Triggers updating of .po files.|


^  Structure-changing Keys   ^         Description ^
|export | List of jobs to be exported to other config files. |
|extend  | Extend the current job with other jobs.|
|include (top-level)  | Include external config files.|
|let   |Define macros.|
|let (top-level) | Define default macros.|
|run  | Define a list of jobs to run. |

^  Input/Output-setting Keys ^         Description ^
|asset-let | Defines macros that will be replaced in #asset hints. |
|dependencies | Fine-tune dependency processing.|
|exclude  | Exclude classes from processing of the job.|
|include  | Include classes to be processed in the job.|
|library  | Define libraries to be taken into account for this job.|
|packages  | Define packages for this app.|
|require   | Define prerequisite classes (load time). |
|settings |Define qooxdoo settings.|
|use   | Define prerequisite classes (run time). |
|variants  | Define variants for the curren app.|

^  Runtime-setting Keys      ^         Description ^
|cache  | Define the path to the cache directory.|
|log  | Tailor log output options.|

^  Miscellaneous Keys         ^         Description ^
|desc  | A descriptive string for the job.|
|name  | A descriptive string for the configuration file.|




===== Listing of Keys in Context =====

This shows the complete possible contents of the top-level configuration map. Further information is linked from the respective keys.

  * **[[generator_config_ref#name|name]]**\\ A name or descriptive text for the configuration file.

  * **[[generator_config_ref#include_top-level|include]]**\\ Include external config files. Takes a list of maps, where each map specifies an external configuration file, and options how to include it. (See special section on the [[generator_config_articles#include_key_top-level_-_adding_features|include key]])

  * **[[generator_config_ref#let_top-level|let]]**\\ Define default macros. Takes a map (see the description of the job-level 'let' further down). This let map is included automatically into every job run. There is no explicit reference to it, so be aware of side effects.

  * **[[generator_config_ref#export|export]]**\\ List of jobs to be exported if this config file is included by another.

  * **[[generator_config_ref#jobs|jobs]]**\\ Map of jobs. Each key is the name of a job.
    * //<jobname>//\\ Each job's value is a map describing the job. The describing map can have any number of the following keys:
      * **[[generator_config_ref#api|api]]**\\ Triggers the generation of a custom Apiviewer application.
      * **[[generator_config_ref#asset-let|asset-let]]**\\ Defines macros that will be replaced in #asset hints in source files. (See special section on the [[generator_config_articles#asset-let_key|"asset-let" key]]).
      * **[[generator_config_ref#cache|cache]]**\\ Define the path to cache directories, most importantly to the compile cache. (See special section on the [[generator_config_articles#cache_key]] key).
      * **[[generator_config_ref#clean-files|clean-files]]**\\ Triggers clean-up of files and directories within a project and the framework, e.g. deletion of generated files, cache contents, etc.
      * **[[generator_config_ref#combine-images|combine-images]]**\\ Triggers creation of a combined image file that contains various images.
      * **[[generator_config_ref#compile-dist|compile-dist]]**\\ Triggers the generation of the build version of the application.
      * **[[generator_config_ref#compile-source|compile-source]]**\\ Triggers generation of the source version of the application.
      * **[[generator_config_ref#copy-files|copy-files]]**\\ Triggers files/directories to be copied, usually between source and build version.
      * **[[generator_config_ref#copy-resources|copy-resources]]**\\ Triggers the copying of resources, usually between source and build version.
      * **[[generator_config_ref#dependencies|dependencies]]**\\ Fine-tune the processing of class dependencies.
      * **[[generator_config_ref#desc|desc]]**\\ A string describing the job.
      * **[[generator_config_ref#exclude|exclude]]**\\ List classes to be excluded from the job. Takes an array of class specifiers.
      * **[[generator_config_ref#extend|extend]]**\\ Extend the current job with other jobs. Takes an array of job names. The information of these jobs are merged into the current job description, so the current job sort of "inherits" their settings. (See the special section on [[generator_config_articles#extend_key|"extend" semantics]]).
      * **[[generator_config_ref#fix-files|fix-files]]**\\ Fix white space in source files.
      * **[[generator_config_ref#include|include]]**\\ List classes to be processed in the job. Takes an array of class specifiers.
      * **[[generator_config_ref#let|let]]**\\ Define macros. Takes a map where each key defines a macro and the value its expansion. (See the special section on [[generator_config_articles#let_key|macros]]).
      * **[[generator_config_ref#library|library]]**\\ Define libraries to be taken into account for this job. Takes an array of maps, each map specifying one library to consider. The most important part therein is the "manifest" specification. (See special section on [[generator_config_articles#manifes_ files|Manifest files]]).
      * **[[generator_config_ref#lint-check|lint-check]]**\\ Check source code with a lint-like utility.
      * **[[generator_config_ref#log|log]]**\\ Tailor log output of job.
      * **[[generator_config_ref#migrate-files|migrate-files]]**\\ Migrate source code to the current qooxdoo version.
      * **[[generator_config_ref#packages|packages]]**\\ Define packages for the application. (See special section on [[generator_config_articles#packages_key|packages]]).
      * **[[generator_config_ref#pretty-print|pretty-print]]**\\ Triggers code beautification of source class files (in-place-editing). An empty map value triggers default formatting, but further keys can tailor the output.
      * **[[generator_config_ref#require|require]]**\\ Define prerequisite classes needed at load time. Takes a map, where the keys are class names and the values lists of prerequisite classes.
      * **[[generator_config_ref#run|run]]**\\ Define a list of jobs to run in place of the current job. (See the special section on [[generator_config_articles#run_key|"run" semantics]]).
      * **[[generator_config_ref#settings|settings]]**\\ Define qooxdoo settings for the generated application.
      * **[[generator_config_ref#shell|shell]]**\\ Triggers the execution of an  external command.
      * **[[generator_config_ref#slice-images|slice-images]]**\\ Triggers cutting images into regions.
      * **[[generator_config_ref#translate|translate]]**\\ (Re-)generate .po files from source classes.
      * **[[generator_config_ref#use|use]]**\\ Define prerequisite classes needed at run time. Takes a map, where the keys are class names and the values lists of prerequisite classes.
      * **[[generator_config_ref#variants|variants]]**\\ Define variants for the generated application.


